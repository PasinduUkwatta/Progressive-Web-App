{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","constants.js","components/CounterButton.js","components/Header.js","containers/App.js","containers/actions.js","registerServiceWorker.js","containers/reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","console","log","map","user","i","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","CounterButton","updateCount","setState","state","count","color","this","onClick","PureComponent","Header","Component","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","error","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","intialStateSearch","intialStateRobots","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9307be28.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  console.log(\"cardlist\")\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchField, searchChange }) => {\n    console.log(\"search box\")\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","export const CHANGE_SEARCH_FIELD =\"CHANGE_SEARCH_FIELD\"\r\n\r\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING'\r\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS'\r\nexport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILED'","import React, {Component, PureComponent} from \"react\";\r\n\r\nclass CounterButton extends PureComponent{\r\n\r\n    constructor() {\r\n        super();\r\n        this.state={\r\n            count :0\r\n        }\r\n    }\r\n\r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //     if(this.state.count!==nextState.count){\r\n    //       return true\r\n    //     }\r\n    //     return  false\r\n    //\r\n    // }\r\n\r\n    updateCount =()=>{\r\n        this.setState(state=>{\r\n            return {count:this.state.count+1}})\r\n\r\n    }\r\n\r\n    render() {\r\n        console.log(\"CounterButton\")\r\n\r\n        return(\r\n            <div>\r\n                <button color={this.props.color} onClick={this.updateCount}>Count :{this.state.count} </button>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CounterButton","import React, {Component} from \"react\";\r\nimport CounterButton from \"./CounterButton\";\r\n\r\nclass Header extends Component{\r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //     return false\r\n    // }\r\n\r\n    render() {\r\n        console.log(\"Header\")\r\n\r\n        return(\r\n            <div>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <CounterButton color ={\"red\"}/>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","import React, { Component } from 'react';\nimport {connect} from \"react-redux\";\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nimport {setSearchField,requestRobots} from \"./actions\";\nimport Header from \"../components/Header\";\n\n\nconst mapStateToProps =state=>{\n  return{\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending:state.requestRobots.isPending,\n    error:state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps =(dispatch)=>{\n  return{\n    onSearchChange :(event)=>dispatch(setSearchField(event.target.value)),\n    onRequestRobots:()=>dispatch(requestRobots())\n\n  }\n}\n\n\n\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots()\n\n  }\n\n\n\n  render() {\n    const {searchField,onSearchChange,robots,isPending} =this.props\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return isPending ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <Header/>\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps) (App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from \"../constants\";\r\n\r\n\r\nexport const setSearchField = (text) => (\r\n    {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n)\r\n\r\nexport const requestRobots =()=>(dispatch)=>{\r\n    dispatch({type:REQUEST_ROBOTS_PENDING})\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(data=>dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data}))\r\n        .catch(error =>dispatch({type:REQUEST_ROBOTS_FAILED,payload:error}))\r\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING} from \"../constants\";\r\n\r\nconst intialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = intialStateSearch, action = {}) => {\r\n    console.log(action.type)\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload})\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nconst intialStateRobots ={\r\n    isPending:false,\r\n    robots: [],\r\n    error :''\r\n\r\n}\r\n\r\nexport const requestRobots =(state=intialStateRobots,action={})=>{\r\n    switch (action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({},state,{isPending:true})\r\n\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({},state,{robots:action.payload,isPending:false})\r\n\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({},state,{error:action.payload,isPending:false})\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider,connect} from \"react-redux\";\nimport {createStore,applyMiddleware,combineReducers} from \"redux\";\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\nimport {searchRobots,requestRobots} from \"./containers/reducers\";\nimport {createLogger} from \"redux-logger/src\";\nimport thunk from \"redux-thunk\";\nimport thunkMiddleware from \"redux-thunk\";\n\nconst logger =createLogger()\nconst rootReducer =combineReducers({searchRobots,requestRobots})\nconst store =createStore(rootReducer,applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}